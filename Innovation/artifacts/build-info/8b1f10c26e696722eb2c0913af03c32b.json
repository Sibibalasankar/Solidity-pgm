{
	"id": "8b1f10c26e696722eb2c0913af03c32b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/Innovation/Task2.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.26;\r\n\r\n// contract FunctionModifier {\r\n\r\n//     address owner;\r\n\r\n//     constructor() {\r\n//         owner = 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2;\r\n//     }\r\n\r\n//     modifier org_owner() {\r\n//         require(msg.sender == owner, \"You're Not Owner!!!!\");\r\n//         _;\r\n//     }\r\n\r\n//     modifier address_Check(address add) {\r\n//         require(add != address(0), \"The Entered Address is Invalid!!!!\");\r\n//         _;\r\n//     }\r\n\r\n//     function get_owner() public view org_owner returns (address) {\r\n//         return owner;\r\n//     }\r\n\r\n//     function deposit() public payable {\r\n//     }\r\n\r\n//     function getBalance() public view returns (uint) {\r\n//         return address(this).balance;\r\n//     }\r\n\r\n//     function withdraw() public org_owner {\r\n//         payable(owner).transfer(address(this).balance);\r\n//     }\r\n// }\r\n\r\n\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"sources": {
			"contracts/Innovation/Task2.sol": {
				"ast": {
					"absolutePath": "contracts/Innovation/Task2.sol",
					"exportedSymbols": {},
					"id": 2,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".26"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						}
					],
					"src": "33:866:0"
				},
				"id": 0
			}
		}
	}
}